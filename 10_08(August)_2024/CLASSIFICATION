1. LINEAR DATA
2. NON - LINEAR DATA

CLASSIFICATION

1. LOGISTIC REGRESSION

1.1 LOGISTIC REGRESSION IS USED FOR LINEAR MODEL
1.2 LOGISTICS REGRESSION IS USED FOR BINARY CLASSIFICATION

---> INPUT : IT HANDLES BOTH LINEAR AND NON-LINEAR DATA

2.1 DECISION TREE ALGORITHM - IT IS USED FOR NON - LINEAR DATA (IT HANDLES BOTH AND ALSO BINARY AND MULTICLASS)

2.1.1 DECISION TREE CLASSIFIER
2.1.2 DECISION TREE REGRESSOR

2.2 RANDOM FOREST - IT IS USED FOR NON - LINEAR DATA

2.2.1 RANDOM FOREST CLASSIFIER
2.2.2 RANDOM FOREST REGRESSOR

NOTE: RANDOM FOREST IS CALLED AS ENSEMBLE MODEL

3. SUPPORT VECTOR MACHINE( PREDOMINANTLY BINARY OR MULTICLASS)

3.1 SUPPORT VECTOR REGRESSION
3.2 SUPPORT VECTOR CLASSIFICATION

4. K NEAREST NEIGHBOUR (KNN) (BINARY OR MULTICLASS)

5. NAIVE BAYES (PROBABILITY BASED ALGORITHM)

5.1 GAUSSIAN NAIVE BAYES
5.2 MULTINOMIAL
5.3 BERNOULLI NAIVE BAYES

-----------------------------------------------Decision Tree--------------------

1. Decision tree is the concept of dividing our actual datasets into subsets of data
2. We form a Tree like structures to find the output
3. the output be the classification or regression
4. metrics can be of the following types:
4.1 confusion matrix
4.2 r2_score
4.3 classification_report


if our normal input  doesn't produce good metrics score, then do the following

1. Add Hyper Parameter Tuning
1.1  Incase of Decision tree
  1.1.1 max_depth
  1.1.2 min_samples_split
  1.1.3 min_samples_leaf

2. if it still throws poor score after the accuracy, we can do various different way to produce good result

3. decision Tree generally select its node, sub tree, leaf on itself. this is happening because two methods

3.1 Decision tree criterion for Regressor
  3.1.1 gini impurity - Default
  3.1.2 squared_error
  3.1.3 poisson
  3.1.4 friedman_mse
  3.1.5 absolute_error

3.2 Decision Tree algorithm for Classifier
  3.2.1 entropy
  3.2.2 log_loss
  3.2.3 gini


Decision tree Working Flow:

Age  Fever  Cough  Covid

25    1       1      1
30    1       0      1
40    0       1      0
45    1       1      1
33    0       0      0
Input:
Age  Fever  Cough

25    1       1
30    1       0
40    0       1
45    1       1
33    0       0


Output:

Covid
1
1
0
1
0

Parent Node:(Criterion --> Identify the parent and which can have the best split )
Evaluate splits:
Child node:

                              Fever
                       yes            No
                Cough                    Cough
            yes       No            Yes         No
            1         0              1            0


Best_estimator:
best_estimator_ is useful when you want to make predictions on new data or examine the properties of the best model found by the search.
For example, once you have identified the best estimator from your GridSearchCV,
you can then use this estimator to make predictions on new data.

Best_params:
On the other hand, best_params_ is useful when you want to understand which parameters work best for your dataset and problem.
For example, you can use best_params_ to identify the best set of hyperparameters for your model.